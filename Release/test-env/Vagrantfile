# -*- mode: ruby -*-
# vi: ft=ruby :

require 'rbconfig'
require 'yaml'

DEFAULT_BASE_BOX = 'bento/centos-7.6'

VAGRANTFILE_API_VERSION = '2'
PROJECT_NAME = '/' + File.basename(Dir.getwd)

hosts = YAML.load_file('vagrant-hosts.yml')

# Server dirs {{{
ALFA2 = '../../Servers/Alfa2'
BRAVO2 = '../../Servers/Bravo2'
KILO2 = '../../Servers/Kilo2'
NOVEMBER2 = '../../Servers/November2'
LIMA2 = '../../Servers/Lima2'
DELTA2 = '../../Servers/Delta2'
CLIENT = '../../Servers/Win10-client'
# }}}

# {{{ Helper functions

# Set options for the network interface configuration. All values are
# optional, and can include:
# - ip (default = DHCP)
# - netmask (default value = 255.255.255.0
# - mac
# - auto_config (if false, Vagrant will not configure this network interface
# - intnet (if true, an internal network adapter will be created instead of a
#   host-only adapter)
def network_options(host)
  options = {}

  if host.has_key?('ip')
    options[:ip] = host['ip']
    options[:netmask] = host['netmask'] ||= '255.255.255.0'
  else
    options[:type] = 'dhcp'
  end

  if host.has_key?('mac')
    options[:mac] = host['mac'].gsub(/[-:]/, '')
  end
  if host.has_key?('auto_config')
    options[:auto_config] = host['auto_config']
  end
  if host.has_key?('intnet') && host['intnet']
    options[:virtualbox__intnet] = true
  end

  options
end

def custom_synced_folders(vm, host)
  if host.has_key?('synced_folders')
    folders = host['synced_folders']

    # NOTE: This is needed for ESXi
    # vm.synced_folder ".", "/vagrant", disabled: true

    folders.each do |folder|
      vm.synced_folder folder['src'], folder['dest'], folder['options']
    end
  end
end

# Adds forwarded ports to your Vagrant machine
#
# example:
#  forwarded_ports:
#    - guest: 88
#      host: 8080
def forwarded_ports(vm, host)
  if host.has_key?('forwarded_ports')
    ports = host['forwarded_ports']

    ports.each do |port|
      vm.network "forwarded_port", guest: port['guest'], host: port['host']
    end
  end
end

# }}}

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  config.ssh.insert_key = false
  hosts.each do |host|
    config.vm.define host['name'] do |node|
      node.vm.box = host['box'] ||= DEFAULT_BASE_BOX
      node.vm.box_version = host['version'] if host.key? 'version'

      node.vm.hostname = host['name']
      node.vm.network :private_network, network_options(host)
      
      node.vm.provider :virtualbox do |vb|
        vb.gui    = host['gui']
        vb.cpus   = host['cpus'] if host.key? 'cpus'
        vb.memory = host['memory'] if host.key? 'memory'
        
        # WARNING: if the name of the current directory is the same as the
        # host name, this will fail.
        vb.customize ['modifyvm', :id, '--groups', PROJECT_NAME]

        # Configure synced folders and forwarded ports here since this
        #   will conflict with ESXi
        custom_synced_folders(node.vm, host)
        forwarded_ports(node.vm, host)
      end

      node.vm.provider :vmware_esxi do |esxi|
        esxi.esxi_hostname = '192.168.2.128'
        esxi.esxi_username = 'root'
        esxi.esxi_password = 'file:~/Repositories/Hogent/p3ops-1920-red/Release/test-env/sshkey'

        # TODO: create networks in ESXi
        # esxi.esxi_virtual_network = ['VM Network','VM Network2','VM Network3','VM Network4']

        # node.vm.synced_folder('.', '/vagrant', type: 'nfs', disabled: true)

        esxi.guest_memsize = host['memory'] if host.key? 'memory'
        esxi.guest_numvcpus = host['cpus'] if host.key? 'cpus'
      end

      config.vm.communicator          = "winrm"
      config.winrm.timeout            = 3600
      config.vm.graceful_halt_timeout = 3600
      config.vm.boot_timeout          = 3600
      # This is needed to communicate with Alfa2 and Bravo2 after they become Domaincontroller
      # NOTE: This needs to be disabled when launching the Win10 clients 
      #       since this cause a WinRM error
      # NOTE: After joining the Win10 hosts this can be enabled again
      config.winrm.transport        = :plaintext
      config.winrm.basic_auth_only    = true

      if host['name'] == "Alfa2"
        provisioning_path = ALFA2+'/Testomgeving/Scripts'

        node.vm.provision 'shell',
          privileged: true,
          path: provisioning_path + '/2_installDCDNS.ps1',
          args: [
            "eng-BE",
            "172.18.1.66",
            "172.18.1.98",
            "27",
            "NAT",
            "LAN"
          ]
        node.vm.provision 'shell', reboot: true
        node.vm.provision 'shell',
          privileged: true,
          path: provisioning_path + '/3_ConfigDCDNS.ps1',
          args: [
            "172.18.1.67", 
            "172.18.1.68", 
            "172.18.1.69", 
            "172.18.1.1", 
            "172.18.1.2", 
            "172.18.1.3", 
            "172.18.1.4", 
            "172.18.1.5", 
            "172.18.1.6", 
            "NAT"
          ]
        node.vm.provision 'shell',
          privileged: true,
          path: provisioning_path + '/4_ADstructure.ps1',
          args: []
        if host['run_agdlp']
          node.vm.provision 'shell',
            privileged: true,
            path: provisioning_path + '/5_AGDLP_PERMISSIONS.ps1',
            args: []
        end
        if host['run_sccm_config']
          node.vm.provision 'shell',
            privileged: true,
            path: provisioning_path + '/999_PrepareADforSCCM.ps1',
            args: []
        end
      elsif host['name'] == "Bravo2"
        provisioning_path = BRAVO2+'/Testomgeving/Scripts'

        node.vm.provision 'shell',
          privileged: true,
          path: provisioning_path + '/2_InstallDCDNS.ps1',
          args: []
        node.vm.provision 'shell', reboot: true
        node.vm.provision 'shell',
          privileged: true,
          path: provisioning_path + '/3_ConfigDCDNS.ps1',
          args: []
      elsif host['name'] == "Kilo2"
        provisioning_path = KILO2+'/test-env/provisioning/'

        node.vm.provision 'shell',
          privileged: true,
          path: provisioning_path + host['name'] + '.ps1',
          args: []

      elsif host['name'] == "November2"
        # TODO
        provisioning_path = NOVEMBER2+'/test-env/provisioning/'

      elsif host['name'] == "Lima2"
        # TODO
        provisioning_path = LIMA2+'/test-env/provisioning/'

      elsif host['name'] == "Delta2"
        provisioning_path = DELTA2+'/test-env/provisioning/'

        iis = host['iis']
        asp = host['asp']
        webapp = host['webapp']

        node.vm.provision 'shell',
          privileged: true,
          path: provisioning_path + host['name'] + '.ps1',
          args: [
            host['downloadpath'],
            iis['username'],
            iis['password'],
            asp['asp45'],
            asp['dotnetcore21'],
            asp['dotnetcore22'],
            asp['dotnetcore30'],
            webapp['demo'],
            webapp['app_name'],
            webapp['pool_name'],
            webapp['website_domain'],
            webapp['publocation'],
            webapp['packagelocation'],
            host['include_linter']
          ]
      elsif host['name'].match(/Win10-client/)
        # TODO
        provisioning_path = CLIENT+'/test-env/provisioning/'

        node.vm.provision 'shell',
          privileged: true,
          path: provisioning_path + 'win10-client.ps1',
          args: [
            host['downloadpath'],
            host['primary_dns'],
            host['secondary_dns'],
            host['domain'],
            host['domain_user'],
            host['domain_pw']
          ]
        node.vm.provision 'shell', reboot: true
      end
    end
  end
end

